'use strict';

// * https://programmers.co.kr/learn/courses/30/lessons/86491?language=javascript

// TODO 최소직사각형
/*********************************************************************** 
input으로 명함 가로세로 길이가 담김 배열을 받는다.
output으로 배열에 담긴 명함이 다 들어갈 지갑 크기를 리턴한다.
***********************************************************************/

// TODO 풀이의 흐름
/***********************************************************************
1. 명함을 길이가 큰 쪽을 무조건 가로라고 보고, 짧은 쪽을 세로라고 생각해서 배열에 넣는다.
2. 배열의 제일 큰 수를 곱한 것인 지갑의 크기이다.
***********************************************************************/

// TODO 시간복잡도, 개선점
/***********************************************************************
 * 시간복잡도는 map 안 sort가 있기 때문에  O(N+NlogN)이 될 것 같다.
 * 개선점은 max로 큰 수를 찾는 것이 아닌, 재할당을 하거나 reduce를 사용할 수 있지만 지금 코드로도 이해가 쉬워 개선점은 없어보인다.
 ***********************************************************************/

function solution(sizes) {
  const x = [];
  const y = [];

  sizes.map((el) => {
    el.sort((a, b) => a - b);
    x.push(el[0]);
    y.push(el[1]);
  });

  //   console.log(x);
  //   console.log(y);

  return Math.max(...x) * Math.max(...y);
}

let sizes = [
  [60, 50],
  [30, 70],
  [60, 30],
  [80, 40],
];
let output = solution(sizes);
console.log(output);

